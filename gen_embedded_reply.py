import discord
import random
import requests
import datetime

import game_config
import game_logic
from datastorage import SqliteDataStorage as sql_db
import config
import server_info


async def no_access() -> discord.embeds:
    emb = discord.Embed(title=f'‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå', color=0xFF0000)
    emb.set_footer(text='–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    return emb


async def online_info():
    info = await server_info.bermuda_server_info()
    if info is not None:
        emb = discord.Embed(title=f"–ò–≥—Ä–æ–∫–æ–≤ {info['players']['active']} –∏–∑ {info['players']['total']}",
                            color=0xf6ff00)
        emb.set_author(name="–û–Ω–ª–∞–π–Ω" if info['is_online'] is True else "–û—Ñ—Ñ–ª–∞–π–Ω")
        emb.add_field(
            name='–ù–∞–∑–≤–∞–Ω–∏–µ:',
            value=info['name'])
        emb.add_field(
            name='–ö–∞—Ä—Ç–∞:',
            value=info['map'])
    else:
        emb = discord.Embed(title=f'‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùå', color=0xFF0000)
    return emb


async def bite(ctx, message: str) -> discord.embeds:
    """–ò–≥—Ä–∞ '–ö—É—Å—å', —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ü–µ–ª—å —É–∫—É—Å–∞, –∫–∞–∂–¥–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–≤–æ–π –Ω–∞–±–æ—Ä gif"""
    target, victim, gif_id = await game_logic.bite_logic(message)
    emb = discord.Embed()
    gif_url = random.choice(game_config.GIF_KUS[gif_id])
    if target is not None:
        emb.add_field(
            name='–ö—É—Å—å!',
            value=f"<@{ctx.author.id}> –æ—Ç–∫—É—Å–∏–ª {target} —É <@{victim}>")
        emb.set_image(url=gif_url)
        return emb
    else:
        emb.add_field(
            name='–ü—Ä–æ–≤–∞–ª!',
            value=f"<@{ctx.author.id}> –æ–±–ª–æ–º–∞–ª –∑—É–±—ã –æ–± <@{victim}>")
        emb.set_image(url=gif_url)
        return emb


async def who_am_i(ctx) -> discord.embeds:
    """–ò–≥—Ä–∞ '–ö—Ç–æ —è?', —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç"""
    responses = game_config.WHOAMI
    random.shuffle(responses)
    emb = discord.Embed()
    emb.add_field(
        name='–ö—Ç–æ —Ç—ã?!',
        value=f"<@{ctx.author.id}> —Ç—ã {random.choice(responses)}!")
    return emb


async def who_should_i_play(ctx) -> discord.embeds:
    emb = discord.Embed(color=0x2F4F4F)
    play_list = [i for i in game_config.BOB_DINO_EMOJI.keys()]
    random.shuffle(play_list)
    play = random.choice(play_list)
    emb.add_field(
        name='–ù–∞ –∫–æ–º –ø–æ–∏–≥—Ä–∞—Ç—å?',
        value=f"<@{ctx.author.id}> –ø–æ–∏–≥—Ä–∞–π –Ω–∞ {play}")
    emb.set_image(url=game_config.BOB_DINO_EMOJI[play])
    return emb


async def shipper(message: str) -> discord.embeds:
    """–ò–≥—Ä–∞ '–®–∏–ø–ø–µ—Ä–∏–Ω–≥', —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ gif"""
    heart = random.choice(game_config.SHIPPER_HEART)
    gif_list = game_config.GIF_SHIPPER
    random.shuffle(gif_list)
    gif_url = random.choice(gif_list)
    victim_one, victim_two, compatibility, title = await game_logic.shipper_logic(message)
    emb = discord.Embed(color=0xF08080)
    emb.add_field(
        name=f'{heart} {compatibility}% {heart}',
        value=f"{victim_one} –∏ {victim_two} {title}")
    emb.set_image(url=gif_url)
    return emb


async def hug(ctx, message):
    gif_list = game_config.GIF_HUG
    random.shuffle(gif_list)
    gif_url = random.choice(gif_list)
    emb = discord.Embed()
    emb.add_field(
        name=f'–û–±–Ω–∏–º–∞—à–∫–∏',
        value=f"<@{ctx.author.id}> –æ–±–Ω–∏–º–∞–µ—Ç {message[1]}")
    emb.set_image(url=gif_url)
    return emb


async def feed(ctx):
    gif_list = game_config.GIF_FEED
    random.shuffle(gif_list)
    gif_url = random.choice(gif_list)
    emb = discord.Embed()
    emb.add_field(
        name=f'–ù—è–º –Ω—è–º',
        value=f"<@{ctx.author.id}> –∫–æ—Ä–º–∏—Ç <@{ctx.raw_mentions[0]}>")
    emb.set_image(url=gif_url)
    return emb


async def kiss(ctx, message):
    gif_list = game_config.GIF_KISS
    random.shuffle(gif_list)
    gif_url = random.choice(game_config.GIF_KISS)
    emb = discord.Embed()
    emb.add_field(
        name=f'–ü–æ—Ü–µ–ª—É–π',
        value=f"<@{ctx.author.id}> —Ü–µ–ª—É–µ—Ç {message[1]}")
    emb.set_image(url=gif_url)
    return emb


async def love(ctx, message):
    random.shuffle(game_config.GIF_LOVE)
    gif_url = random.choice(game_config.GIF_LOVE)
    emb = discord.Embed()
    emb.add_field(
        name=f'–õ—é–±–æ–≤—å',
        value=f"<@{ctx.author.id}> –ª—é–±–∏—Ç {message[1]}")
    emb.set_image(url=gif_url)
    return emb


async def hit(ctx, message):
    random.shuffle(game_config.GIF_HIT)
    gif_url = random.choice(game_config.GIF_HIT)
    emb = discord.Embed()
    emb.add_field(
        name=f'–£–¥–∞—Ä!',
        value=f"<@{ctx.author.id}> –±—å—ë—Ç {message[1]}")
    emb.set_image(url=gif_url)
    return emb


async def rest(ctx):
    random.shuffle(game_config.GIF_REST)
    gif_url = random.choice(game_config.GIF_REST)
    emb = discord.Embed()
    emb.add_field(
        name=f'–õ–µ–∂–∞—Ç—å!',
        value=f"<@{ctx.raw_mentions[0]}> –õ—ë–≥!")
    emb.set_image(url=gif_url)
    return emb


async def slap(ctx, message):
    random.shuffle(game_config.GIF_SLAP)
    gif_url = random.choice(game_config.GIF_SLAP)
    emb = discord.Embed()
    emb.add_field(
        name=f'–®–ª—ë–ø!',
        value=f"<@{ctx.author.id}> —à–ª—ë–ø–∞–µ—Ç {message[1]}")
    emb.set_image(url=gif_url)
    return emb


async def poke(ctx, message):
    random.shuffle(game_config.GIF_POKE)
    gif_url = random.choice(game_config.GIF_POKE)
    emb = discord.Embed()
    emb.add_field(
        name=f'–¢—ã–∫',
        value=f"<@{ctx.author.id}> —Ç—ã–∫–∞–µ—Ç {message[1]}")
    emb.set_image(url=gif_url)
    return emb


async def take_hand(ctx, message):
    random.shuffle(game_config.GIF_TAKEHAND)
    gif_url = random.choice(game_config.GIF_TAKEHAND)
    emb = discord.Embed()
    emb.add_field(
        name=f'–í–∑—è—Ç—å –∑–∞ —Ä—É–∫—É',
        value=f"<@{ctx.author.id}> –±–µ—Ä—ë—Ç –∑–∞ —Ä—É–∫—É {message[3]}")
    emb.set_image(url=gif_url)
    return emb


async def stroke(ctx, message):
    random.shuffle(game_config.GIF_STROKE)
    gif_url = random.choice(game_config.GIF_STROKE)
    emb = discord.Embed()
    emb.add_field(
        name=f'–ü–æ–≥–ª–∞–¥–∏—Ç—å',
        value=f"<@{ctx.author.id}> –≥–ª–∞–¥–∏—Ç {message[1]}")
    emb.set_image(url=gif_url)
    return emb


async def sad(ctx):
    gif_url = random.choice(game_config.GIF_SAD)
    emb = discord.Embed()
    emb.add_field(
        name=f'–ü–µ—á–∞–ª—å',
        value=f"<@{ctx.author.id}> –≥—Ä—É—Å—Ç–∏—Ç...")
    emb.set_image(url=gif_url)
    return emb


async def lick(ctx, message):
    random.shuffle(game_config.GIF_LICK)
    gif_url = random.choice(game_config.GIF_LICK)
    emb = discord.Embed()
    emb.add_field(
        name=f'–õ–∏–∑—å',
        value=f"<@{ctx.author.id}> –æ–±–ª–∏–∑—ã–≤–∞–µ—Ç {message[1]}")
    emb.set_image(url=gif_url)
    return emb


async def sex(ctx):
    emb = discord.Embed()
    emb.add_field(
        name=f':white_check_mark: = –î–∞.  :negative_squared_cross_mark: = –ù–µ—Ç ',
        value=f'<@{ctx.raw_mentions[0]}> –¥–∞—ë—à—å –ª–∏ —Ç—ã —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Å–µ–∫—Å c <@{ctx.author.id}>?')
    return emb


async def sex_accept(husband, wife):
    gif_url = random.choice(game_config.GIF_SEX)
    emb = discord.Embed()
    description = f"<@{husband}> –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–µ–∫—Å–æ–º —Å <@{wife}>" if husband != wife else f"<@{husband}> –¥—Ä–æ—á–∏—Ç."
    emb.add_field(
        name=f'–°–µ–∫—Å',
        value=description)
    emb.set_image(url=gif_url)
    return emb


async def sex_history(ctx, channel, whore=None):
    db = sql_db(config.db_name)
    if whore is None:
        if channel.id in [726050381481902080, 718840575238864956]:
            history = db.get_marriage_accounts(f"marriage_{ctx.guild.name.strip().replace(' ', '_')}")
            if history is not None:
                sex_count = {}
                sex_historyes = {}
                for member in history:
                    if member['sex_count'] is not None and member['sex_history'] is not None:
                        sex_count[member['discord_id']] = member['sex_count']
                        sex_historyes[member['discord_id']] = member['sex_history'].split()
                text = ''
                count = 0
                for member, history in sex_historyes.items():
                    count += 1
                    partners = ''
                    for partner in sex_historyes[member]:
                        name = f"<@{partner.split(':')[0]}>" if int(partner.split(':')[0]) != int(
                            member) else "``–î—Ä–æ—á–∏—Ç``"
                        partners += f"\n\t\t{name} - {' '.join(game_logic.ending_check(partner.split(':')[1]))}"
                    text += f"\n\nüíû <@{member}> ``-> {sex_count[member]}``\n–ü–∞—Ä—Ç–Ω—ë—Ä—ã:{partners}"

                    if count == 5:
                        emb = discord.Embed(description=text, color=0xFA8072)
                        emb.set_footer(text=f"–ò—Å—Ç–æ—Ä–∏—è —Å–µ–∫—Å–æ–≤ {ctx.guild.name}", icon_url=ctx.guild.icon_url)
                        await channel.send(embed=emb)
                        emb.clear_fields()
                        text = ''
                        count = 0
                if len(text) > 1:
                    emb = discord.Embed(description=text, color=0xFA8072)
                    emb.set_footer(text=f"–ò—Å—Ç–æ—Ä–∏—è —Å–µ–∫—Å–æ–≤ {ctx.guild.name}", icon_url=ctx.guild.icon_url)
                    await channel.send(embed=emb)
                    emb.clear_fields()
    else:
        history = db.get_marriage_account(f"marriage_{ctx.guild.name.strip().replace(' ', '_')}", int(whore))
        if history is None:
            await channel.send("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            partners = ''
            if history['sex_count'] is not None and history['sex_history'] is not None:
                sex_count = history['sex_count']
                sex_historyes = history['sex_history'].split()
                for partner in sex_historyes:
                    name = f"<@{partner.split(':')[0]}>" if int(partner.split(':')[0]) != int(whore) else "``–î—Ä–æ—á–∏—Ç``"
                    partners += f"\n{name} - {' '.join(game_logic.ending_check(partner.split(':')[1]))}"
                emb = discord.Embed(description=f"üíû <@{whore}> ``-> {sex_count}``\n", color=0xFA8072)
                emb.add_field(
                    name='–ü–∞—Ä—Ç–Ω—ë—Ä—ã:',
                    value=f"{partners}")
                emb.set_footer(text=f"–ò—Å—Ç–æ—Ä–∏—è —Å–µ–∫—Å–æ–≤ {ctx.guild.name}", icon_url=ctx.guild.icon_url)
                await channel.send(embed=emb)
            else:
                await channel.send("*–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*")


async def marriage_history(ctx, channel):
    db = sql_db(config.db_name)
    history = db.get_marriage_accounts(f"marriage_{ctx.guild.name.strip().replace(' ', '_')}")
    date_now = datetime.date.today()
    marriages = {}
    marriages_date = {}
    marriages_history = {}
    marriages_count = {}
    for member in history:
        if member['spouse'] is not None and member['spouse'] not in marriages.keys():
            marriages[member['discord_id']] = member['spouse']
            year, month, day = member["date_of_marriage"].split(':')
            marriage_date = datetime.date(int(year), int(month), int(day))
            marriage_days = date_now - marriage_date
            marriages_date[member['discord_id']] = marriage_days.days
        if member['marriage_count'] is not None and member['marriage_history'] is not None:
            marriages_count[member['discord_id']] = member['marriage_count']
            marriages_history[member['discord_id']] = member['marriage_history'].split()
    text = ''
    count = 0
    for i in marriages.keys():
        if int(i) == int(marriages[i]):
            continue
        else:
            text += f"<@{i}> –∏ <@{marriages[i]}> –≤–º–µ—Å—Ç–µ —É–∂–µ **{marriages_date[i]}** –¥–Ω–µ–π :cupid:\n\n"
            count += 1
        if count == 10:
            emb = discord.Embed(
                description=text,
                color=0xFA8072)
            # if len(marriages_history[i]) > 1:
            #     partners = ''
            #     for partner in marriages_history[i]:
            #         partners += f"<@{partner.split('_')[1]}> "
            #     emb.add_field(
            #         name='üíî –ë—ã–≤—à–∏–µ:',
            #         value=f"{partners}")
            emb.set_footer(text=f"–õ—é–¥–∏ –Ω–∞—à–µ–¥—à–∏–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞ {ctx.guild.name}", icon_url=ctx.guild.icon_url)
            await channel.send(embed=emb)
            emb.clear_fields()
            text = ''
            count = 0
    if len(text) > 1:
        emb = discord.Embed(
            description=text,
            color=0xFA8072)
        emb.set_footer(text=f"–õ—é–¥–∏ –Ω–∞—à–µ–¥—à–∏–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞ {ctx.guild.name}", icon_url=ctx.guild.icon_url)
        await channel.send(embed=emb)
        emb.clear_fields()


async def anger(ctx):
    gif_list = game_config.GIF_ANGER
    random.shuffle(gif_list)
    gif_url = random.choice(gif_list)
    emb = discord.Embed()
    emb.add_field(
        name=f'–ó–ª–æ—Å—Ç—å',
        value=f"<@{ctx.author.id}> –∑–ª–∏—Ç—Å—è")
    emb.set_image(url=gif_url)
    return emb


async def smoke(ctx):
    if ctx.author.id == 514780826085621771:
        gif_url = random.choice(game_config.OLIVIA_SMOKE)
    else:
        random.shuffle(game_config.GIF_SMOKE)
        gif_url = random.choice(game_config.GIF_SMOKE)
    emb = discord.Embed()
    if len(ctx.raw_mentions) > 0:
        paty = ''
        for i in ctx.raw_mentions:
            paty += f' <@{i}>'
        emb.add_field(
            name=f'–ö—É—Ä–∏—Ç—å',
            value=f"<@{ctx.author.id}>{paty} –∫—É—Ä—è—Ç üö¨")
    else:
        emb.add_field(
            name=f'–ö—É—Ä–∏—Ç—å',
            value=f"<@{ctx.author.id}> –∫—É—Ä–∏—Ç üö¨")
    emb.set_image(url=gif_url)
    return emb


async def hookah(ctx):
    print("–ö–ê–õ–¨–Ø–ù")
    random.shuffle(game_config.GIF_HOOKAH)
    gif_url = random.choice(game_config.GIF_HOOKAH)
    emb = discord.Embed()
    if len(ctx.raw_mentions) > 0:
        paty = ''
        for i in ctx.raw_mentions:
            paty += f' <@{i}>'
        emb.add_field(
            name=f'–ö—É—Ä–∏—Ç—å',
            value=f"<@{ctx.author.id}>{paty} –∫—É—Ä—è—Ç –∫–∞–ª—å—è–Ω")
    else:
        emb.add_field(
            name=f'–ö–∞–ª—å—è–Ω',
            value=f"<@{ctx.author.id}> –∫—É—Ä–∏—Ç –∫–∞–ª—å—è–Ω")
    emb.set_image(url=gif_url)
    return emb


async def dance(ctx):
    random.shuffle(game_config.GIF_DANCE)
    gif_url = random.choice(game_config.GIF_DANCE)
    emb = discord.Embed()
    if len(ctx.raw_mentions) > 0:
        paty = ''
        for i in ctx.raw_mentions:
            paty += f' <@{i}>'
        emb.add_field(
            name=f'–¢–∞–Ω—Ü—ã',
            value=f"<@{ctx.author.id}>{paty} —Ç–∞–Ω—Ü—É—é—Ç –≤–º–µ—Å—Ç–µ <a:4325_MeMeMe:593485738004316190><a:4325_MeMeMe:593485738004316190><a:4325_MeMeMe:593485738004316190>")
    else:
        emb.add_field(
            name=f'–¢–∞–Ω—Ü—ã',
            value=f"<@{ctx.author.id}> —Ç–∞–Ω—Ü—É–µ—Ç <a:4325_MeMeMe:593485738004316190>")
    emb.set_image(url=gif_url)
    return emb


async def drink(ctx):
    if ctx.author.id == 514780826085621771:
        gif_url = random.choice(game_config.OLIVIA_DRINK)
    else:
        random.shuffle(game_config.GIF_DRINK)
        gif_url = random.choice(game_config.GIF_DRINK)
    drink_emoji = random.choice(game_config.DRINK_EMOJI)
    emb = discord.Embed()
    if len(ctx.raw_mentions) > 0:
        paty = ''
        for i in ctx.raw_mentions:
            paty += f' <@{i}>'
        emb.add_field(
            name=f'–ë—É—Ö–∞—Ç—å! <a:red_dance:593485736305623096>',
            value=f"<@{ctx.author.id}>{paty} –±—É—Ö–∞—é—Ç –≤–º–µ—Å—Ç–µ  {drink_emoji}")
    else:
        emb.add_field(
            name=f'–ë—É—Ö–∞—Ç—å! <a:red_dance:593485736305623096>',
            value=f"<@{ctx.author.id}> –±—É—Ö–∞–µ—Ç {drink_emoji}")
    emb.set_image(url=gif_url)
    return emb


async def marriage(ctx):
    emb = discord.Embed(title='``–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞!`` :couple_with_heart:', color=0xF08080)
    emb.add_field(
        name=f':white_check_mark: = –î–∞.  :negative_squared_cross_mark: = –ù–µ—Ç ',
        value=f'<@{ctx.raw_mentions[0]}> –¥–∞—ë—à—å –ª–∏ —Ç—ã —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –±—Ä–∞–∫ c <@{ctx.author.id}>?')
    return emb


async def marriage_accept(husband_id, wife_id):
    gif_url = random.choice(game_config.GIF_MARRIAGE)
    emb = discord.Embed(title='üíù:tada:üíñ', color=0xF08080)
    emb.add_field(
        name=f'–ù–æ–≤—ã–π —Å–æ—é–∑ –¥–≤—É—Ö –ª—é–±—è—â–∏—Ö —Å–µ—Ä–¥–µ—Ü :ring:',
        value=f"–° —ç—Ç–æ–≥–æ –¥–Ω—è <@{husband_id}> –∏ <@{wife_id}> –≤ —Å—á–∞—Å—Ç–ª–∏–≤–æ–º –±—Ä–∞–∫–µ! :tada:")
    emb.set_image(url=gif_url)
    return emb


async def marriage_rejected(husband_id, wife_id):
    gif_url = random.choice(game_config.GIF_SAD)
    emb = discord.Embed(title='üíî', color=0xF08080)
    emb.add_field(
        name=f'–û—Ç–≤–µ—Ä–≥–Ω—É—Ç',
        value=f"<@{wife_id}> –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç <@{husband_id}>")
    emb.set_image(url=gif_url)
    return emb


async def marriage_fail(discord_id):
    emb = discord.Embed(color=0xF08080)
    emb.add_field(
        name=f'–ï—Å—Ç—å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∫–∞',
        value=f"<@{discord_id}> —É–∂–µ –≤ –±—Ä–∞–∫–µ")
    return emb


async def marriage_self(ctx):
    emb = discord.Embed(color=0xF08080)
    emb.add_field(
        name=f'–ï—Å—Ç—å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∫–∞',
        value=f"<@{ctx.author.id}> —Å–æ—á—É–≤—Å—Ç–≤—É—é —Ç–≤–æ–µ–º—É –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤—É, –Ω–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π.")
    return emb


async def divorce_complete(ctx, date):
    date_now = datetime.date.today()
    year, month, day = date.split(':')
    marriage_date = datetime.date(int(year), int(month), int(day))
    days = date_now - marriage_date
    gif_url = random.choice(game_config.GIF_SAD)
    emb = discord.Embed(color=0xF08080)
    emb.add_field(
        name=f'–†–∞–∑—Ä—ã–≤ –±—Ä–∞—á–Ω—ã—Ö —É–∑',
        value=f"<@{ctx.author.id}> —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç –±—Ä–∞–∫ —Å <@{ctx.raw_mentions[0]}> –¥–ª–∏–≤—à–∏–π—Å—è {days.days} –¥–Ω–µ–π")
    emb.set_image(url=gif_url)
    return emb


async def divorce_fail(ctx):
    emb = discord.Embed(color=0xF08080)
    emb.add_field(
        name=f'–ï—Å—Ç—å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∫–∞',
        value=f"<@{ctx.raw_mentions[0]}> –Ω–µ –≤ –±—Ä–∞–∫–µ —Å <@{ctx.author.id}>")
    return emb


async def steam_id_info(steam_id):
    session = requests.Session()
    try:
        info_from_steam = session.get(
            f'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key={config.steam_api_key}'
            f'&steamids={steam_id}')
        if info_from_steam.ok:
            player_info = info_from_steam.json()['response']['players'][0]
            emb = discord.Embed(title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ **Steam**:',
                                color=0x000000)
            emb.add_field(
                name='–ù–∏–∫–Ω–µ–π–º:',
                value=f"**{player_info['personaname']}**")
            if player_info['personastate'] == 1:
                stat = '–û–Ω–ª–∞–π–Ω'
            elif player_info['personastate'] == 2:
                stat = '–ó–∞–Ω—è—Ç'
            elif player_info['personastate'] == 3:
                stat = '–ù–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ'
            elif player_info['personastate'] == 4:
                stat = '–ù–∞–µ–ª—Å—è –∏ —Å–ø–∏—Ç'
            else:
                stat = '–ù–µ –≤ —Å–µ—Ç–∏'
            emb.add_field(
                name='–°—Ç–∞—Ç—É—Å:',
                value=stat)
            info_about_old_nikname = session.post(f'https://steamcommunity.com/profiles/{steam_id}/ajaxaliases/')
            if info_about_old_nikname.ok:
                nik_history = ''
                for nik in info_about_old_nikname.json():
                    nik_history += f"`{nik['newname']}` *({nik['timechanged']})*\n"
                emb.add_field(
                    name='–î—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞:',
                    value=nik_history if len(nik_history) > 0 else '–ù–µ—Ç',
                    inline=False)
            emb.add_field(
                name='–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:',
                value=player_info['profileurl'])
            emb.set_thumbnail(url=player_info['avatarfull'])
            emb.set_footer(text=f"SteamID:{steam_id}")
            return emb

    except requests.exceptions.ConnectionError:
        return '–ù–µ–ª—å–∑—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É.'


async def user_info(target, user):
    emb = discord.Embed(title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:',
                        color=target.color)
    emb.add_field(
        name='–ò–º—è:',
        value=target)
    emb.add_field(
        name='–ò–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:',
        value=target.nick if not 'None' else target.name)
    status = []
    if str(target.mobile_status) != 'offline':
        status.append('Mobile')
    if str(target.desktop_status) != 'offline':
        status.append('Desktop')
    if str(target.web_status) != 'offline':
        status.append('Web')
    emb.add_field(
        name='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:',
        value=f"{target.status} {' & '.join(status)}\n{target.activity}" if len(status) >= 1 else 'Offline',
        inline=False)
    emb.add_field(
        name=f'–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ {target.guild.name}:',
        value=f"{target.joined_at.day}.{target.joined_at.month}.{target.joined_at.year}")
    old = datetime.datetime.now() - target.created_at
    emb.add_field(
        name='–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:',
        value=f"{old.days} –¥–Ω–µ–π",
        inline=False)
    roles = []
    for role in target.roles:
        roles.append(f"<@&{role.id}>\n")
    roles.reverse()
    emb.add_field(
        name='–†–æ–ª–∏',
        value=''.join(roles[:-1]) if len(roles) > 1 else '–ù–µ—Ç —Ä–æ–ª–µ–π')
    emb.set_thumbnail(url=target.avatar_url)
    return emb
