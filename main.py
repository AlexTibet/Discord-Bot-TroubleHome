import asyncio
import discord
import re
import datetime
import config
from datastorage import SqliteDataStorage
import gen_embedded_reply
import message_handlers
import gen_emb_for_theisle
import server_info
import websockets
import server_config_editor


class MyClient(discord.Client):

    async def on_ready(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ (–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å)"""
        print(f'Logged on as {self.user}!')
        for i in range(len(self.guilds)):
            print(f"Bot run on server '{self.guilds[i].name}' with serverID = {self.guilds[i].id},"
                  f" with {self.guilds[i].member_count} users")
        print(self.guilds)
        await MyClient.change_presence(self, status=discord.Status.online, activity=discord.Game('–ö—É—Å—å'))
        print(self.activity)
        print("Connecting to database...")
        sql_db = SqliteDataStorage(config.db_name)
        print("Connection to the database is complete.")
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        for guild in self.guilds:   # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –±—Ä–∞–∫–æ–≤ (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ "–±—Ä–∞–∫–∞—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            sql_db.create_marriage_tabel(guild.name.strip().replace(' ', '_'))  # –Ω–µ–ª—å–∑—è —á—Ç–æ–±—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –±—ã–ª –ø—Ä–æ–±–µ–ª
            table = None
            if re.search(config.BoB_server_name, guild.name):
                table = "BoB_Users"
            if re.search(config.TheIsle_server_name, guild.name):
                table = "TheIsle_Users"
            if table is not None:
                for member in guild.members:    # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    member_status = False
                    accounts = sql_db.get_accounts(table)
                    for account in accounts:
                        if account["discord_id"] == member.id:
                            print(f"{member} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¢–∞–±–ª–∏—Ü–∞: {table} ID:{member.id})")
                            member_status = True
                            break
                    if member_status is not True and table is not None:
                        sql_db.create_account(table, member.id)
                        print(f"{member} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¢–∞–±–ª–∏—Ü–∞: {table} —Å ID:{member.id}")
                continue
            await self.starting_online_check()

    async def on_message(self, ctx):
        """–°–º–æ—Ç—Ä–∏–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö, –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º"""
        print(f"{ctx.guild}| {ctx.channel} | {ctx.author} |{ctx.content}")
        channel = discord.Client.get_channel(self, ctx.channel.id)
        message = ctx.content.split()
        if channel.id in config.ADMIN_CHANNEL:  # channel id list
            try:
                if re.search(r"[\d]{17}", message[0].split("/")[0].split("<")[0]):
                    steam_id = message[0].strip()
                    steam_find_url = f'https://steamidfinder.com/lookup/{steam_id}/'
                    await channel.send(steam_find_url)

                if re.search(r"^[–ö–∫]–∞–∫–æ[–π–≤]\b", message[0]) and re.search(r"^[–û–æ]–Ω–ª–∞–π–Ω\b", message[1].replace('?', '')):
                    await channel.send(embed=await gen_embedded_reply.online_info())

                if re.search(r'^[–ë–±]—É—Å—Ç–µ—Ä—ã', message[0]):
                    boosters = []
                    for buster in ctx.author.guild.premium_subscribers:
                        boosters.append(f"<@{buster.id}>\n")
                    emb = discord.Embed()
                    emb.add_field(
                        name='–ò–º—è:',
                        value=f"–°–µ–π—á–∞—Å –±—É—Å—Ç—è—Ç —Å–µ—Ä–≤–µ—Ä:\n{''.join(boosters)}")
                    await channel.send(embed=emb)
            except IndexError:
                pass

        if channel.id in config.INFO_CHANNEL:
            try:
                if re.search(r"^[–ò–∏]–Ω—Ñ–æ", message[0]) and len(ctx.raw_mentions) == 1:
                    target = ctx.author.guild.get_member(ctx.raw_mentions[0])
                    user = discord.Client.get_user(self, target.id)
                    emb = await gen_embedded_reply.user_info(target, user)
                    await channel.send(embed=emb)
            except IndexError:
                pass

        if channel.id in config.GAME_CHANNEL:  # channel id list
            await message_handlers.game_message(ctx, channel, self)

        if channel.id in config.DINO_CHANNEL:  # channel id list
            try:
                if re.search(r"^[–î–¥]–∏–Ω–æ\b", message[0]) and re.search(r"^[–ò–∏]–Ω—Ñ–æ\b", message[1]):
                    emb = await gen_emb_for_theisle.database_check(message)
                    await channel.send(embed=emb)
                    emb = await gen_emb_for_theisle.dino_info(ctx, message)
                    await channel.send(embed=emb)

                elif re.search(r"^[–í–≤]—ã–¥–∞—Ç—å\b", message[0]) and re.search(r"^[–î–¥]–∏–Ω–æ\b", message[1]):
                    emb = await gen_emb_for_theisle.give_dino(message, channel)
                    await channel.send(embed=emb)

                elif re.search(r"^[–°—Å]–ø–∏—Å–æ–∫\b", message[0]) and re.search(r"^[–î–¥]–∏–Ω–æ\b", message[1]):
                    await gen_emb_for_theisle.dino_catalog(channel)
            except IndexError:
                pass
        if channel.id == config.SERVER_CONFIG_CHANNEL:
            try:
                if re.search(r"^[–ê–∞]–¥–º–∏–Ω–∫–∞\b", message[0]) and re.search(r"^[\d]{17}\b", message[1].split("/")[0].split("<")[0]):
                    if role_access(ctx, [config.TECHNIC_ROLE, config.OWNER_ROLE]):
                        try:
                            server_config = await server_config_editor.editing_preparation()
                            response = await server_config_editor.add_server_admin(message[1], server_config)
                            if response:
                                emb = discord.Embed(title=f'‚úÖ –ì–æ—Ç–æ–≤–æ', color=0x20B2AA)
                                emb.set_footer(text='–ê–¥–º–∏–Ω–∫–∞ –ø—Ä–æ–ø–∏—Å–∞–Ω–∞, –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä')
                                await channel.send(embed=emb)
                        except FileNotFoundError:
                            emb = discord.Embed(title=f'‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.‚ùå', color=0xFF0000)
                            await channel.send(embed=emb)
                    else:
                        emb = discord.Embed(title=f'‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ ‚ùå', color=0xFF0000)
                        await channel.send(embed=emb)
            except IndexError:
                pass

    async def on_member_join(self, member):
        join_time = datetime.datetime.now()
        ban_time = datetime.timedelta(days=1)
        if ban_time > join_time - member.created_at:
            channel = discord.Client.get_channel(self, config.ADMIN_CHANNEL[1])
            user = discord.Client.get_user(self, member.id)
            emb = await gen_embedded_reply.user_info(member, user)
            await channel.send(f'<@{member.id}> *—ç—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–∏–π –∞–∫–∫ –∫–æ—Ç–æ—Ä–æ–º—É –º–µ–Ω–µ–µ —Å—É—Ç–æ–∫*\n'
                               f'*–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ* üçå ', embed=emb)

    async def starting_online_check(self):
        while True:
            online = await server_info.bermuda_server_info()
            await client.online_activity(online)
            print(f"{self} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç—É—Å, –æ–∂–∏–¥–∞–Ω–∏–µ")
            await asyncio.sleep(30)

    async def online_activity(self, info):
        online = f"{info['players']['active']} –∏–∑ {info['players']['total']}"
        game = discord.Game(online)
        try:
            await client.change_presence(status=discord.Status.online, activity=game)
        except websockets.exceptions.ConnectionClosedOK:
            game = discord.Game("–û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            await client.change_presence(status=discord.Status.online, activity=game)
        print(self.activity)


async def role_access(ctx, access_list) -> bool:
    """Checking access member to command"""
    for i in ctx.author.roles:
        if i.id in access_list:
            return True
    else:
        return False

# RUN
client = MyClient()
client.run(config.TOKEN)
